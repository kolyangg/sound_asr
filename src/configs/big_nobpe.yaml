defaults:
  - model: ds2_31Dec_big
  - writer: server2
  - metrics: ds2
  - datasets: full_ds2
  - dataloader: server2_full
  - transforms: transforms
  - _self_
optimizer:
  _target_: torch.optim.AdamW
  lr: 7.5e-5
  weight_decay: 0.01 # added in v2
lr_scheduler:
  _target_: torch.optim.lr_scheduler.OneCycleLR
  max_lr: 5e-4
  pct_start: 0.2
  steps_per_epoch: ${trainer.epoch_len}
  epochs: ${trainer.n_epochs}
  anneal_strategy: cos
loss_function:
  _target_: src.loss.CTCLossWrapper
text_encoder:
  _target_: src.text_encoder.CTCTextEncoder
  arpa_path: 4-gram_lc_correct.arpa
  binary_path: 4-gram_lc_correct.bin
  lm_weight: 0.0
  unigram_path: librispeech-vocab.txt
  use_bpe: False
  pretrained_tokenizer: "sentencepiece_model/librispeech_unigram_model1000_new2.model"
  beam_size: 1
  use_lm: True
trainer:
  log_step: 50
  n_epochs: 150
  epoch_len: 200
  device_tensors: ["spectrogram", "text_encoded"] # which tensors should be on device (ex. GPU)
  resume_from: null # null or path to the checkpoint dir with *.pth and config.yaml
  device: auto # device name or "auto"
  override: True # if True, will override the previous run with the same name
  monitor: "min val_CER_(Argmax)" # "off" or "max/min metric_name", i.e. our goal is to maximize/minimize metric
  save_period: 4 # checkpoint each save_period epochs in addition to the best epoch
  # early_stop: ${trainer.n_epochs} # epochs for early stopping
  save_dir: "saved_nobpe_04Jan_big"
  seed: 1
  use_beam_search: False
  use_lm: True # False 
  beam_size: 1
  max_grad_norm: 5.0 # Max norm of the gradients
  lm_weight_min: 0.0
  lm_weight_max: 0.0
  lm_warmup_epochs: 15
  