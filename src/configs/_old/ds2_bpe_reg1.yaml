defaults:
  - model: ds2_reg3
  - writer: server
  - metrics: ds2 # updated
  - datasets: full_ds2 # full_ds
  # - dataloader: sortagrad # new one to try!
  - dataloader: server16
  - transforms: example_only_instance_more # default
  # - transforms: example_only_instance_more # example_only_instance default
  - _self_
optimizer:
  _target_: torch.optim.SGD
  lr: 0.001
  momentum: 0.9
  weight_decay: 5e-4
  # nesterov: false
# lr_scheduler:
#   _target_: torch.optim.lr_scheduler.LambdaLR
#   lr_lambda:
#     _target_: src.utils.poly_decay.polynomial_decay_epoch  
#     max_epochs: ${trainer.n_epochs}
#     power: 0.5
#     epoch: 1
lr_scheduler:
  _target_: torch.optim.lr_scheduler.OneCycleLR
  max_lr: 1e-2
  steps_per_epoch: ${trainer.epoch_len}   # e.g. 1000
  epochs: ${trainer.n_epochs}             # e.g. 20
  pct_start: 0.1
  anneal_strategy: cos
  # steps_per_epoch: ${trainer.epoch_len}
  # epochs: ${trainer.n_epochs}
loss_function:
  _target_: src.loss.CTCLossWrapper
text_encoder:
  _target_: src.text_encoder.CTCTextEncoder
  # arpa_path: 3-gram_lc.arpa
  arpa_path: 4-gram_lc_correct.arpa
  # binary_path: 3-gram_lc.bin
  binary_path: 4-gram_lc_correct.bin
  # arpa_path: ~
  # binary_path: ~
  lm_weight: 0.0 # less for lighter model
  # lm_weight: 0
  unigram_path: librispeech-vocab.txt
  # unigram_path: ~
  use_bpe: True # smth wrong with BPE (too high loss) - to CHECK!!!
  # pretrained_tokenizer: "sentencepiece_model/librispeech_unigram_model.model"
  pretrained_tokenizer: "sentencepiece_model/librispeech_unigram_model1000_new2.model"
  beam_size: 1 # New input
  use_lm: False # True
trainer:
  log_step: 50 # 50 default
  n_epochs: 250
  epoch_len: 200 # 1000 # 200 default
  device_tensors: ["spectrogram", "text_encoded"] # which tensors should be on device (ex. GPU)
  # resume_from: null # null or path to the checkpoint dir with *.pth and config.yaml
  # resume_from: model_best.pth
  resume_from: checkpoint-epoch80.pth 
  # resume_from: ds1 # testing
  device: auto # device name or "auto"
  override: True # if True, will override the previous run with the same name
  monitor: "min val_CER_(Argmax)" # "off" or "max/min metric_name", i.e. our goal is to maximize/minimize metric
  # monitor: "min val_CER_(BeamSrch)" # updated
  save_period: 10 # checkpoint each save_period epochs in addition to the best epoch
  early_stop: ${trainer.n_epochs} # epochs for early stopping
  save_dir: "saved_lm5_bpe_reg1"
  seed: 1
  use_beam_search: False # to CHECK if this switch if working here
  use_lm: False 
  beam_size: 1 # New input (remove from trainer later)
  max_grad_norm: 5.0 # Max norm of the gradients
  lm_weight_min: 0.0
  lm_weight_max: 0.0
  lm_warmup_epochs: 15
  